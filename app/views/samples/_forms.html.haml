%section#forms
  .page-header
    %h1 Forms
  .row
    .span4
      %h2 Form Builder
    .span12
      = twitter_bootstrap_form_for Sample.new do |user|
        // wraps a section in a fieldset with the provided legend text
        = user.inputs 'Sign up' do
          // generates a standard email field
          = user.email_field :email, :placeholder => 'me@example.com'
          // generates a password field with a descriptive aside
          = user.password_field :password do
            %span.help-block
              Must be no larger than 6 characters<br/>
              Must contain only the letters 'x' or 'p'
          // a field with a custom label
          = user.password_field :password_confirmation, 'Confirm Password'
          // input fields with custom add-ons
          = user.text_field :twitter_id, 'Twitter', :class => 'medium', :add_on => :prepend do
            %span.add-on @
          // lists of checkboxes / radio buttons
          = user.toggles 'Agreements' do
            = user.check_box :agree,   'I agree to the abusive Terms and Conditions'
            = user.check_box :spam,    'I agree to receive all sorts of spam'
            = user.check_box :spammer, 'I agree to let the site spam others through my Twitter account'
        // wraps buttons in a distinctive style
        = user.actions do
          = user.submit 'Sign up'
          = button_tag  'Cancel', :type => 'reset', :class => 'btn'

  .row
    .span4
      %h2 Buttons
      %p As a convention, buttons are used for actions while links are used for objects. For instance, "Download" could be a button and "recent activity" could be a link.
      %p All buttons default to a light gray style, but a number of functional classes can be applied for different color styles. These classes include a blue <code>.primary</code> class, a light-blue <code>.info</code> class, a green <code>.success</code> class, and a red <code>.danger</code> class.
    .span12
      %h3 Example buttons
      %p Button styles can be applied to anything with the <code>.btn</code> applied. Typically you’ll want to apply these to only <code>&lt;a&gt;</code>, <code>&lt;button&gt;</code>, and select <code>&lt;input&gt;</code> elements. Here’s how it looks:
      .well{ :style => "padding: 14px 19px;" }
        %button.btn.primary Primary
        &nbsp;
        %button.btn Default
        &nbsp;
        %button.btn.info Info
        &nbsp;
        %button.btn.success Success
        &nbsp;
        %button.btn.danger Danger
      %h3 Alternate sizes
      %p Fancy larger or smaller buttons? Have at it!
      .well
        = link_to "Primary action", "#", :class => "btn large primary"
        = link_to "Action", "#", :class => "btn large"
      .well{ :style => "padding: 16px 19px;" }
        = link_to "Primary action", "#", :class => "btn small primary"
        = link_to "Action", "#", :class => "btn small"
      %h3 Disabled state
      %p For buttons that are not active or are disabled by the app for one reason or another, use the disabled state. That’s <code>.disabled</code> for links and <code>:disabled</code> for <code>&lt;button&gt;</code> elements.
      %h4 Links
      .well
        = link_to "Primary action", "#", :class => "btn large primary disabled"
        = link_to "Action", "#", :class => "btn large disabled"
      %h4 Buttons
      .well
        %button.btn.large.primary.disabled{ :disabled => "disabled" } Primary action
        &nbsp;
        %button.btn.large.disabled Action

